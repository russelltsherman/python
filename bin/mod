#!/usr/bin/env bash

set -e

# find script location
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

usage() {
  cat <<- EOF

  scaffold new python module and correctponding test file

  usage: $0 <module>

    module: path.to.module

EOF
}

# validate format of provided
validate_modulename() {
    case $1 in
    .* ) 
        echo "module name should not start with period"
        exit 1 
        ;;    
    *. ) 
        echo "module name should not end with period"
        exit 1 
        ;;   
    *[^a-zA-Z.]* ) 
        echo "module name should include only alpha characters"
        exit 1
        ;;
    *..* )
        echo "module name contains duplicated periods"
        exit 1    
    esac
    echo "$1"
}
# capitalize first letter of each word in string
title_case() { 
    echo "$1" | gsed -E "s/[[:alnum:]_'-]+/\u&/g"
}
# convert module name to class name
classify() {
    local titlecased
    titlecased=$(title_case "$1")
    echo "${titlecased//.}"
}

main() {
    local module="${MODULE//.//}"
    local modpath
    local modtestpath
    moddir="$(cd "$DIR/../" && pwd)/"
    modpath="$moddir/$module"
    testdir="$moddir/tests/"
    modtestpath="$moddir/tests/$module"
    mkdir -p "$modpath"
    mkdir -p "$modtestpath"

    dirs=$(echo "$MODULE" | tr "." "\n")
    for dir in $dirs
    do
        moddir="$moddir/$dir"
        touch "$moddir/__init__.py"
        testdir="$testdir/$dir"
        touch "$testdir/__init__.py"
    done

    echo "$MODFILE" > "$modpath/__init__.py"
    echo "$TESTFILE" > "$modtestpath/__init__.py"
}

if [ "$#" -lt 1 ]; then usage; exit 1; fi # if no parameters show usage and die

validate_modulename "${1}"

MODULE="${1}"
Module="$(classify "$MODULE")"

MODFILE=$(cat <<EOF

def hello():
    return "Hello, World!"

EOF
)

TESTFILE=$(cat <<EOF
from unittest import TestCase

from $MODULE import hello

class Test$Module(TestCase):
    def test_hello(self):
        """
        test that function output is Hello, world!
        """
        expect = "Hello, World!"
        result = hello()
        self.assertEqual(result, expect)

"""
| Method	              | Equivalent to    |
|-------------------------|------------------|              
| .assertEqual(a, b)	  | a == b           |
| .assertTrue(x)	      | bool(x) is True  |
| .assertFalse(x)	      | bool(x) is False |
| .assertIs(a, b)         | a is b           |
| .assertIsNone(x)	      | x is None        |
| .assertIn(a, b)	      | a in b           |
| .assertIsInstance(a, b) | isinstance(a, b) |
"""

EOF
)

main
